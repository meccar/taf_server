name: .NET Continuous Deployment
on:
  workflow_run:
    workflows: [ ".NET Build" ]
    types:
      - completed

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: taf_server
            context: ./src/Presentations
            dockerfile: ./src/Presentations/Dockerfile
          - name: identity_server
            context: ./src/IdentityServer
            dockerfile: ./src/IdentityServer/Dockerfile
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/taf_server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/taf_server:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taf_server:latest
          cache-to: type=inline
          platforms: linux/amd64
          
#  create-release:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create GitHub Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
#        with:
#          tag_name: release-${{ github.sha }}
#          release_name: Release ${{ github.sha }}
#          draft: false
#          prerelease: false
#
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./taf_server-${{ github.sha }}.tar.gz
#          asset_name: taf_server-${{ github.sha }}.tar.gz
#          asset_content_type: application/gzip
          
#  deploy-dev:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    environment: development
#    steps:
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Deploy to Azure Container Apps - Dev
#        uses: azure/container-apps-deploy-action@v1
#        with:
#          containerAppName: 'taf_server-name-dev'
#          resourceGroup: 'your-resource-group'
#          imageToDeploy: your-username/taf_server:${{ github.sha }}
#          targetPort: 80
#            
#  deploy-prod:
#    needs: deploy-dev
#    runs-on: ubuntu-latest
#    environment:
#      name: production
#      url: https://your-production-url.com
#    steps:
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Deploy to Azure Container Apps - Prod
#        uses: azure/container-apps-deploy-action@v1
#        with:
#          containerAppName: 'taf_server-name-prod'
#          resourceGroup: 'your-resource-group'
#          imageToDeploy: your-username/taf_server:${{ github.sha }}
#          targetPort: 80