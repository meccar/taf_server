name: .NET Continuous Deployment
on:
  workflow_run:
    workflows: [ ".NET Build" ]
    types:
      - completed

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        service:
          - name: presentation
#            context: ./src/Presentations
            context: ./artifacts/src/Presentations
#            dockerfile: ./src/Presentations/Dockerfile
            dockerfile: ./src/Presentations/Dockerfile
          - name: identity_server
#            context: ./src/IdentityServer
            context: ./artifacts/src/IdentityServer
#            dockerfile: ./src/IdentityServer/Dockerfile
            dockerfile: ./src/IdentityServer/Dockerfile
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

#      - name: Download build artifacts
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              run_id: context.payload.workflow_run.id,
#            });
#            const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
#              return artifact.name == "build-artifacts"
#            })[0];
#            const download = await github.rest.actions.downloadArtifact({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              artifact_id: matchArtifact.id,
#              archive_format: 'zip',
#            });
#            const fs = require('fs');
#            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/build-artifacts.zip`, Buffer.from(download.data));

#      - name: Extract artifacts
#        run: |
#          mkdir -p ./artifacts
#          unzip build-artifacts.zip -d ./artifacts
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

#      - name: Download test results
#        uses: actions/download-artifact@v4
#        with:
#          name: test-results
#          path: ./test-results
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          run-id: ${{ github.event.workflow_run.id }}
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/taf_server_${{ matrix.service.name }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          #          context: ${{ matrix.service.context }}
#          context: ./artifacts
          file: ${{ matrix.service.dockerfile }}
          push: true
#          tags: |
#            ${{ secrets.DOCKERHUB_USERNAME }}/taf_server_${{ matrix.service.name }}:latest
#            ${{ secrets.DOCKERHUB_USERNAME }}/taf_server_${{ matrix.service.name }}:${{ github.sha }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/taf_server_${{ matrix.service.name }}:latest
          cache-to: type=inline
          platforms: linux/amd64
#          no-cache: true
          
      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/taf_server_${{ matrix.service.name }}:${{ github.sha }}
          fail-build: false
          severity-cutoff: critical
          
#  create-release:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create GitHub Release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
#        with:
#          tag_name: release-${{ github.sha }}
#          release_name: Release ${{ github.sha }}
#          draft: false
#          prerelease: false
#
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./taf_server-${{ github.sha }}.tar.gz
#          asset_name: taf_server-${{ github.sha }}.tar.gz
#          asset_content_type: application/gzip
          
#  deploy-dev:
#    needs: build-and-push
#    runs-on: ubuntu-latest
#    environment: development
#    steps:
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Deploy to Azure Container Apps - Dev
#        uses: azure/container-apps-deploy-action@v1
#        with:
#          containerAppName: 'taf_server-name-dev'
#          resourceGroup: 'your-resource-group'
#          imageToDeploy: your-username/taf_server:${{ github.sha }}
#          targetPort: 80
#            
#  deploy-prod:
#    needs: deploy-dev
#    runs-on: ubuntu-latest
#    environment:
#      name: production
#      url: https://your-production-url.com
#    steps:
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Deploy to Azure Container Apps - Prod
#        uses: azure/container-apps-deploy-action@v1
#        with:
#          containerAppName: 'taf_server-name-prod'
#          resourceGroup: 'your-resource-group'
#          imageToDeploy: your-username/taf_server:${{ github.sha }}
#          targetPort: 80